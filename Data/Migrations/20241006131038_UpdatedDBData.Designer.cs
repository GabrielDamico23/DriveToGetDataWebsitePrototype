// <auto-generated />
using System;
using DriveToGetDataWebsitePrototype.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DriveToGetDataWebsitePrototype.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241006131038_UpdatedDBData")]
    partial class UpdatedDBData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DriveToGetDataWebsitePrototype.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DriveToGetDataWebsitePrototype.Models.Circuit", b =>
                {
                    b.Property<string>("CircuitId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CircuitName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CircuitId");

                    b.ToTable("Circuits", (string)null);

                    b.HasData(
                        new
                        {
                            CircuitId = "albert_park",
                            CircuitName = "Albert Park Grand Prix Circuit",
                            Country = "Australia",
                            Locality = "Melbourne",
                            Url = "http://en.wikipedia.org/wiki/Melbourne_Grand_Prix_Circuit"
                        },
                        new
                        {
                            CircuitId = "americas",
                            CircuitName = "Circuit of the Americas",
                            Country = "USA",
                            Locality = "Austin",
                            Url = "http://en.wikipedia.org/wiki/Circuit_of_the_Americas"
                        },
                        new
                        {
                            CircuitId = "bahrain",
                            CircuitName = "Bahrain International Circuit",
                            Country = "Bahrain",
                            Locality = "Sakhir",
                            Url = "http://en.wikipedia.org/wiki/Bahrain_International_Circuit"
                        },
                        new
                        {
                            CircuitId = "baku",
                            CircuitName = "Baku City Circuit",
                            Country = "Azerbaijan",
                            Locality = "Baku",
                            Url = "http://en.wikipedia.org/wiki/Baku_City_Circuit"
                        },
                        new
                        {
                            CircuitId = "catalunya",
                            CircuitName = "Circuit de Barcelona-Catalunya",
                            Country = "Spain",
                            Locality = "Montmelo",
                            Url = "http://en.wikipedia.org/wiki/Circuit_de_Barcelona-Catalunya"
                        },
                        new
                        {
                            CircuitId = "hungaroring",
                            CircuitName = "Hungaroring",
                            Country = "Hungary",
                            Locality = "Budapest",
                            Url = "http://en.wikipedia.org/wiki/Hungaroring"
                        },
                        new
                        {
                            CircuitId = "imola",
                            CircuitName = "Autodromo Enzo e Dino Ferrari",
                            Country = "Italy",
                            Locality = "Imola",
                            Url = "http://en.wikipedia.org/wiki/Autodromo_Enzo_e_Dino_Ferrari"
                        },
                        new
                        {
                            CircuitId = "interlagos",
                            CircuitName = "Autodromo Jose Carlos Pace",
                            Country = "Brazil",
                            Locality = "Sao Paulo",
                            Url = "http://en.wikipedia.org/wiki/Aut%C3%B3dromo_Jos%C3%A9_Carlos_Pace"
                        },
                        new
                        {
                            CircuitId = "jeddah",
                            CircuitName = "Jeddah Corniche Circuit",
                            Country = "Saudi Arabia",
                            Locality = "Jeddah",
                            Url = "http://en.wikipedia.org/wiki/Jeddah_Street_Circuit"
                        },
                        new
                        {
                            CircuitId = "losail",
                            CircuitName = "Losail International Circuit",
                            Country = "Qatar",
                            Locality = "Al Daayen",
                            Url = "http://en.wikipedia.org/wiki/Losail_International_Circuit"
                        },
                        new
                        {
                            CircuitId = "marina_bay",
                            CircuitName = "Marina Bay Street Circuit",
                            Country = "Singapore",
                            Locality = "Marina Bay",
                            Url = "http://en.wikipedia.org/wiki/Marina_Bay_Street_Circuit"
                        },
                        new
                        {
                            CircuitId = "miami",
                            CircuitName = "Miami International Autodrome",
                            Country = "USA",
                            Locality = "Miami",
                            Url = "http://en.wikipedia.org/wiki/Miami_International_Autodrome"
                        },
                        new
                        {
                            CircuitId = "monaco",
                            CircuitName = "Circuit de Monaco",
                            Country = "Monaco",
                            Locality = "Monte Carlo",
                            Url = "http://en.wikipedia.org/wiki/Circuit_de_Monaco"
                        },
                        new
                        {
                            CircuitId = "monza",
                            CircuitName = "Autodromo Nazionale di Monza",
                            Country = "Italy",
                            Locality = "Monza",
                            Url = "http://en.wikipedia.org/wiki/Autodromo_Nazionale_Monza"
                        },
                        new
                        {
                            CircuitId = "red_bull_ring",
                            CircuitName = "Red Bull Ring",
                            Country = "Austria",
                            Locality = "Spielberg",
                            Url = "http://en.wikipedia.org/wiki/Red_Bull_Ring"
                        },
                        new
                        {
                            CircuitId = "ricard",
                            CircuitName = "Circuit Paul Ricard",
                            Country = "France",
                            Locality = "Le Castellet",
                            Url = "http://en.wikipedia.org/wiki/Paul_Ricard_Circuit"
                        },
                        new
                        {
                            CircuitId = "rodriguez",
                            CircuitName = "Autodromo Hermanos Rodriguez",
                            Country = "Mexico",
                            Locality = "Mexico City",
                            Url = "http://en.wikipedia.org/wiki/Aut%C3%B3dromo_Hermanos_Rodr%C3%ADguez"
                        },
                        new
                        {
                            CircuitId = "shanghai",
                            CircuitName = "Shanghai International Circuit",
                            Country = "China",
                            Locality = "Shanghai",
                            Url = "http://en.wikipedia.org/wiki/Shanghai_International_Circuit"
                        },
                        new
                        {
                            CircuitId = "silverstone",
                            CircuitName = "Silverstone Circuit",
                            Country = "UK",
                            Locality = "Silverstone",
                            Url = "http://en.wikipedia.org/wiki/Silverstone_Circuit"
                        },
                        new
                        {
                            CircuitId = "spa",
                            CircuitName = "Circuit de Spa-Francorchamps",
                            Country = "Belgium",
                            Locality = "Spa",
                            Url = "http://en.wikipedia.org/wiki/Circuit_de_Spa-Francorchamps"
                        },
                        new
                        {
                            CircuitId = "suzuka",
                            CircuitName = "Suzuka Circuit",
                            Country = "Japan",
                            Locality = "Suzuka",
                            Url = "http://en.wikipedia.org/wiki/Suzuka_Circuit"
                        },
                        new
                        {
                            CircuitId = "vegas",
                            CircuitName = "Las Vegas Strip Street Circuit",
                            Country = "USA",
                            Locality = "Las Vegas",
                            Url = "https://en.wikipedia.org/wiki/Las_Vegas_Grand_Prix#Circuit"
                        },
                        new
                        {
                            CircuitId = "villeneuve",
                            CircuitName = "Circuit Gilles Villeneuve",
                            Country = "Canada",
                            Locality = "Montreal",
                            Url = "http://en.wikipedia.org/wiki/Circuit_Gilles_Villeneuve"
                        },
                        new
                        {
                            CircuitId = "yas_marina",
                            CircuitName = "Yas Marina Circuit",
                            Country = "UAE",
                            Locality = "Abu Dhabi",
                            Url = "http://en.wikipedia.org/wiki/Yas_Marina_Circuit"
                        },
                        new
                        {
                            CircuitId = "zandvoort",
                            CircuitName = "Circuit Zandvoort",
                            Country = "Netherlands",
                            Locality = "Zandvoort",
                            Url = "http://en.wikipedia.org/wiki/Circuit_Zandvoort"
                        });
                });

            modelBuilder.Entity("DriveToGetDataWebsitePrototype.Models.Constructor", b =>
                {
                    b.Property<string>("ConstructorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConstructorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConstructorId");

                    b.ToTable("Constructors", (string)null);

                    b.HasData(
                        new
                        {
                            ConstructorId = "alpine",
                            ConstructorName = "Alpine F1 Team",
                            Nationality = "French",
                            Url = "http://en.wikipedia.org/wiki/Alpine_F1_Team"
                        },
                        new
                        {
                            ConstructorId = "astone_martin",
                            ConstructorName = "Aston Martin",
                            Nationality = "British",
                            Url = "http://en.wikipedia.org/wiki/Aston_Martin_in_Formula_One"
                        },
                        new
                        {
                            ConstructorId = "ferrari",
                            ConstructorName = "Ferrari",
                            Nationality = "Italian",
                            Url = "http://en.wikipedia.org/wiki/Scuderia_Ferrari"
                        },
                        new
                        {
                            ConstructorId = "haas",
                            ConstructorName = "Haas F1 Team",
                            Nationality = "American",
                            Url = "http://en.wikipedia.org/wiki/Haas_F1_Team"
                        },
                        new
                        {
                            ConstructorId = "mclaren",
                            ConstructorName = "McLaren",
                            Nationality = "British",
                            Url = "http://en.wikipedia.org/wiki/McLaren"
                        },
                        new
                        {
                            ConstructorId = "mercedes",
                            ConstructorName = "Mercedes",
                            Nationality = "German",
                            Url = "http://en.wikipedia.org/wiki/Mercedes-Benz_in_Formula_One"
                        },
                        new
                        {
                            ConstructorId = "rb",
                            ConstructorName = "RB F1 Team",
                            Nationality = "Italian",
                            Url = "http://en.wikipedia.org/wiki/RB_Formula_One_Team"
                        },
                        new
                        {
                            ConstructorId = "red_bull",
                            ConstructorName = "Red Bull",
                            Nationality = "Austrian",
                            Url = "http://en.wikipedia.org/wiki/Red_Bull_Racing"
                        },
                        new
                        {
                            ConstructorId = "sauber",
                            ConstructorName = "Sauber",
                            Nationality = "Swiss",
                            Url = "http://en.wikipedia.org/wiki/Sauber_Motorsport"
                        },
                        new
                        {
                            ConstructorId = "williams",
                            ConstructorName = "Williams",
                            Nationality = "British",
                            Url = "http://en.wikipedia.org/wiki/Williams_Grand_Prix_Engineering"
                        });
                });

            modelBuilder.Entity("DriveToGetDataWebsitePrototype.Models.F1Driver", b =>
                {
                    b.Property<string>("F1DriverId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DateOfBirth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PermanentNumber")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("F1DriverId");

                    b.ToTable("Drivers", (string)null);

                    b.HasData(
                        new
                        {
                            F1DriverId = "hamilton",
                            DateOfBirth = "1985-01-07",
                            FamilyName = "Hamilton",
                            GivenName = "Lewis",
                            Nationality = "British",
                            PermanentNumber = 44,
                            Url = "http://en.wikipedia.org/wiki/Lewis_Hamilton"
                        },
                        new
                        {
                            F1DriverId = "bottas",
                            DateOfBirth = "1989-08-28",
                            FamilyName = "Bottas",
                            GivenName = "Valtteri",
                            Nationality = "Finnish",
                            PermanentNumber = 77,
                            Url = "http://en.wikipedia.org/wiki/Valtteri_Bottas"
                        },
                        new
                        {
                            F1DriverId = "max_verstappen",
                            DateOfBirth = "1997-09-30",
                            FamilyName = "Verstappen",
                            GivenName = "Max",
                            Nationality = "Dutch",
                            PermanentNumber = 1,
                            Url = "http://en.wikipedia.org/wiki/Max_Verstappen"
                        },
                        new
                        {
                            F1DriverId = "perez",
                            DateOfBirth = "1990-01-26",
                            FamilyName = "Perez",
                            GivenName = "Sergio",
                            Nationality = "Mexican",
                            PermanentNumber = 11,
                            Url = "http://en.wikipedia.org/wiki/Sergio_P%C3%A9rez"
                        },
                        new
                        {
                            F1DriverId = "norris",
                            DateOfBirth = "1999-11-13",
                            FamilyName = "Norris",
                            GivenName = "Lando",
                            Nationality = "British",
                            PermanentNumber = 4,
                            Url = "http://en.wikipedia.org/wiki/Lando_Norris"
                        },
                        new
                        {
                            F1DriverId = "ricciardo",
                            DateOfBirth = "1989-07-01",
                            FamilyName = "Ricciardo",
                            GivenName = "Daniel",
                            Nationality = "Australian",
                            PermanentNumber = 3,
                            Url = "http://en.wikipedia.org/wiki/Daniel_Ricciardo"
                        },
                        new
                        {
                            F1DriverId = "sainz",
                            DateOfBirth = "1994-09-01",
                            FamilyName = "Sainz",
                            GivenName = "Carlos",
                            Nationality = "Spanish",
                            PermanentNumber = 55,
                            Url = "http://en.wikipedia.org/wiki/Carlos_Sainz_Jr."
                        },
                        new
                        {
                            F1DriverId = "leclerc",
                            DateOfBirth = "1997-10-16",
                            FamilyName = "Leclerc",
                            GivenName = "Charles",
                            Nationality = "Monegasque",
                            PermanentNumber = 16,
                            Url = "http://en.wikipedia.org/wiki/Charles_Leclerc"
                        },
                        new
                        {
                            F1DriverId = "piastri",
                            DateOfBirth = "2001-04-06",
                            FamilyName = "Piastri",
                            GivenName = "Oscar",
                            Nationality = "Australian",
                            PermanentNumber = 81,
                            Url = "http://en.wikipedia.org/wiki/Oscar_Piastri"
                        },
                        new
                        {
                            F1DriverId = "russell",
                            DateOfBirth = "1998-02-15",
                            FamilyName = "Russell",
                            GivenName = "George",
                            Nationality = "British",
                            PermanentNumber = 63,
                            Url = "http://en.wikipedia.org/wiki/George_Russell_(racing_driver)"
                        },
                        new
                        {
                            F1DriverId = "alonso",
                            DateOfBirth = "1981-07-29",
                            FamilyName = "Alonso",
                            GivenName = "Fernando",
                            Nationality = "Spanish",
                            PermanentNumber = 14,
                            Url = "http://en.wikipedia.org/wiki/Fernando_Alonso"
                        },
                        new
                        {
                            F1DriverId = "ocon",
                            DateOfBirth = "1996-09-17",
                            FamilyName = "Ocon",
                            GivenName = "Esteban",
                            Nationality = "French",
                            PermanentNumber = 31,
                            Url = "http://en.wikipedia.org/wiki/Esteban_Ocon"
                        },
                        new
                        {
                            F1DriverId = "hulkenberg",
                            DateOfBirth = "1987-08-19",
                            FamilyName = "Hulkenberg",
                            GivenName = "Nico",
                            Nationality = "German",
                            PermanentNumber = 27,
                            Url = "http://en.wikipedia.org/wiki/Nico_H%C3%BClkenberg"
                        },
                        new
                        {
                            F1DriverId = "stroll",
                            DateOfBirth = "1998-10-29",
                            FamilyName = "Stroll",
                            GivenName = "Lance",
                            Nationality = "Canadian",
                            PermanentNumber = 18,
                            Url = "http://en.wikipedia.org/wiki/Lance_Stroll"
                        },
                        new
                        {
                            F1DriverId = "tsunoda",
                            DateOfBirth = "2000-05-11",
                            FamilyName = "Tsunoda",
                            GivenName = "Yuki",
                            Nationality = "Japanese",
                            PermanentNumber = 22,
                            Url = "http://en.wikipedia.org/wiki/Yuki_Tsunoda"
                        },
                        new
                        {
                            F1DriverId = "gasly",
                            DateOfBirth = "1996-02-07",
                            FamilyName = "Gasly",
                            GivenName = "Pierre",
                            Nationality = "French",
                            PermanentNumber = 10,
                            Url = "http://en.wikipedia.org/wiki/Pierre_Gasly"
                        },
                        new
                        {
                            F1DriverId = "bearman",
                            DateOfBirth = "2005-05-08",
                            FamilyName = "Bearman",
                            GivenName = "Oliver",
                            Nationality = "British",
                            PermanentNumber = 50,
                            Url = "http://en.wikipedia.org/wiki/Oliver_Bearman"
                        },
                        new
                        {
                            F1DriverId = "kevin_magnussen",
                            DateOfBirth = "1992-10-05",
                            FamilyName = "Magnussen",
                            GivenName = "Kevin",
                            Nationality = "Danish",
                            PermanentNumber = 20,
                            Url = "http://en.wikipedia.org/wiki/Kevin_Magnussen"
                        },
                        new
                        {
                            F1DriverId = "colapinto",
                            DateOfBirth = "2003-05-27",
                            FamilyName = "Colapinto",
                            GivenName = "Franco",
                            Nationality = "Argentinian",
                            PermanentNumber = 43,
                            Url = "http://en.wikipedia.org/wiki/Franco_Colapinto"
                        },
                        new
                        {
                            F1DriverId = "mick_schumacher",
                            DateOfBirth = "1999-03-22",
                            FamilyName = "Schumacher",
                            GivenName = "Mick",
                            Nationality = "German",
                            PermanentNumber = 47,
                            Url = "http://en.wikipedia.org/wiki/Mick_Schumacher"
                        },
                        new
                        {
                            F1DriverId = "vettel",
                            DateOfBirth = "1987-07-03",
                            FamilyName = "Vettel",
                            GivenName = "Sebastian",
                            Nationality = "German",
                            PermanentNumber = 5,
                            Url = "http://en.wikipedia.org/wiki/Sebastian_Vettel"
                        },
                        new
                        {
                            F1DriverId = "latifi",
                            DateOfBirth = "1995-06-29",
                            FamilyName = "Latifi",
                            GivenName = "Nicholas",
                            Nationality = "Canadian",
                            PermanentNumber = 6,
                            Url = "http://en.wikipedia.org/wiki/Nicholas_Latifi"
                        },
                        new
                        {
                            F1DriverId = "zhou",
                            DateOfBirth = "1999-05-30",
                            FamilyName = "Guanyu",
                            GivenName = "Zhou",
                            Nationality = "Chinese",
                            PermanentNumber = 24,
                            Url = "http://en.wikipedia.org/wiki/Zhou_Guanyu"
                        },
                        new
                        {
                            F1DriverId = "sargeant",
                            DateOfBirth = "2000-12-31",
                            FamilyName = "Sargeant",
                            GivenName = "Logan",
                            Nationality = "American",
                            PermanentNumber = 2,
                            Url = "http://en.wikipedia.org/wiki/Logan_Sargeant"
                        },
                        new
                        {
                            F1DriverId = "albon",
                            DateOfBirth = "1996-03-23",
                            FamilyName = "Albon",
                            GivenName = "Alexander",
                            Nationality = "Thai",
                            PermanentNumber = 23,
                            Url = "http://en.wikipedia.org/wiki/Alexander_Albon"
                        },
                        new
                        {
                            F1DriverId = "de_vries",
                            DateOfBirth = "1995-02-06",
                            FamilyName = "de Vries",
                            GivenName = "Nyck",
                            Nationality = "Dutch",
                            PermanentNumber = 7,
                            Url = "http://en.wikipedia.org/wiki/Nyck_de_Vries"
                        },
                        new
                        {
                            F1DriverId = "lawson",
                            DateOfBirth = "2002-02-11",
                            FamilyName = "Lawson",
                            GivenName = "Liam",
                            Nationality = "New Zealander",
                            PermanentNumber = 36,
                            Url = "http://en.wikipedia.org/wiki/Liam_Lawson"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DriveToGetDataWebsitePrototype.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DriveToGetDataWebsitePrototype.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DriveToGetDataWebsitePrototype.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DriveToGetDataWebsitePrototype.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
