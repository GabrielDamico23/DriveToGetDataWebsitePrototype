// <auto-generated />
using System;
using DriveToGetDataWebsitePrototype.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DriveToGetDataWebsitePrototype.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240925192027_AddDrivers")]
    partial class AddDrivers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DriveToGetDataWebsitePrototype.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DriveToGetDataWebsitePrototype.Models.Driver", b =>
                {
                    b.Property<string>("DriverId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PermanentNumber")
                        .HasColumnType("int");

                    b.HasKey("DriverId");

                    b.ToTable("Driver", (string)null);

                    b.HasData(
                        new
                        {
                            DriverId = "hamilton",
                            FamilyName = "Hamilton",
                            GivenName = "Lewis",
                            Nationality = "British",
                            PermanentNumber = 44
                        },
                        new
                        {
                            DriverId = "bottas",
                            FamilyName = "Bottas",
                            GivenName = "Valtteri",
                            Nationality = "Finnish",
                            PermanentNumber = 77
                        },
                        new
                        {
                            DriverId = "verstappen",
                            FamilyName = "Verstappen",
                            GivenName = "Max",
                            Nationality = "Dutch",
                            PermanentNumber = 1
                        },
                        new
                        {
                            DriverId = "perez",
                            FamilyName = "Perez",
                            GivenName = "Sergio",
                            Nationality = "Mexican",
                            PermanentNumber = 11
                        },
                        new
                        {
                            DriverId = "norris",
                            FamilyName = "Norris",
                            GivenName = "Lando",
                            Nationality = "British",
                            PermanentNumber = 4
                        },
                        new
                        {
                            DriverId = "ricciardo",
                            FamilyName = "Ricciardo",
                            GivenName = "Daniel",
                            Nationality = "Australian",
                            PermanentNumber = 3
                        },
                        new
                        {
                            DriverId = "sainz",
                            FamilyName = "Sainz",
                            GivenName = "Carlos",
                            Nationality = "Spanish",
                            PermanentNumber = 55
                        },
                        new
                        {
                            DriverId = "leclerc",
                            FamilyName = "Leclerc",
                            GivenName = "Charles",
                            Nationality = "Monegasque",
                            PermanentNumber = 16
                        },
                        new
                        {
                            DriverId = "piastri",
                            FamilyName = "Piastri",
                            GivenName = "Oscar",
                            Nationality = "Australian",
                            PermanentNumber = 81
                        },
                        new
                        {
                            DriverId = "russell",
                            FamilyName = "Russell",
                            GivenName = "George",
                            Nationality = "British",
                            PermanentNumber = 63
                        },
                        new
                        {
                            DriverId = "alonso",
                            FamilyName = "Alonso",
                            GivenName = "Fernando",
                            Nationality = "Spanish",
                            PermanentNumber = 14
                        },
                        new
                        {
                            DriverId = "ocon",
                            FamilyName = "Ocon",
                            GivenName = "Esteban",
                            Nationality = "French",
                            PermanentNumber = 31
                        },
                        new
                        {
                            DriverId = "hulkenberg",
                            FamilyName = "Hulkenberg",
                            GivenName = "Nico",
                            Nationality = "German",
                            PermanentNumber = 27
                        },
                        new
                        {
                            DriverId = "stroll",
                            FamilyName = "Stroll",
                            GivenName = "Lance",
                            Nationality = "Canadian",
                            PermanentNumber = 18
                        },
                        new
                        {
                            DriverId = "tsunoda",
                            FamilyName = "Tsunoda",
                            GivenName = "Yuki",
                            Nationality = "Japanese",
                            PermanentNumber = 22
                        },
                        new
                        {
                            DriverId = "gasly",
                            FamilyName = "Gasly",
                            GivenName = "Pierre",
                            Nationality = "French",
                            PermanentNumber = 10
                        },
                        new
                        {
                            DriverId = "bearman",
                            FamilyName = "Bearman",
                            GivenName = "Oliver",
                            Nationality = "British",
                            PermanentNumber = 50
                        },
                        new
                        {
                            DriverId = "magnussen",
                            FamilyName = "Magnussen",
                            GivenName = "Kevin",
                            Nationality = "Danish",
                            PermanentNumber = 20
                        },
                        new
                        {
                            DriverId = "colapinto",
                            FamilyName = "Colapinto",
                            GivenName = "Franco",
                            Nationality = "Argentinian",
                            PermanentNumber = 43
                        },
                        new
                        {
                            DriverId = "schumacher",
                            FamilyName = "Schumacher",
                            GivenName = "Mick",
                            Nationality = "German",
                            PermanentNumber = 47
                        },
                        new
                        {
                            DriverId = "vettel",
                            FamilyName = "Vettel",
                            GivenName = "Sebastian",
                            Nationality = "German",
                            PermanentNumber = 5
                        },
                        new
                        {
                            DriverId = "latifi",
                            FamilyName = "Latifi",
                            GivenName = "Nicholas",
                            Nationality = "Canadian",
                            PermanentNumber = 6
                        },
                        new
                        {
                            DriverId = "Guanyu",
                            FamilyName = "Zhou",
                            GivenName = "Zhou",
                            Nationality = "Chinese",
                            PermanentNumber = 24
                        },
                        new
                        {
                            DriverId = "sargeant",
                            FamilyName = "Sargeant",
                            GivenName = "Logan",
                            Nationality = "American",
                            PermanentNumber = 2
                        },
                        new
                        {
                            DriverId = "albon",
                            FamilyName = "Albon",
                            GivenName = "Alexander",
                            Nationality = "Thai",
                            PermanentNumber = 23
                        },
                        new
                        {
                            DriverId = "deVries",
                            FamilyName = "de Vries",
                            GivenName = "Nyck",
                            Nationality = "Dutch",
                            PermanentNumber = 7
                        },
                        new
                        {
                            DriverId = "lawson",
                            FamilyName = "Lawson",
                            GivenName = "Liam",
                            Nationality = "New Zealander",
                            PermanentNumber = 36
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DriveToGetDataWebsitePrototype.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DriveToGetDataWebsitePrototype.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DriveToGetDataWebsitePrototype.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DriveToGetDataWebsitePrototype.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
