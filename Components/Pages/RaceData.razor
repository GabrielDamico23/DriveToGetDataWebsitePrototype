@page "/racedata"

@inject HttpClient httpClient
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.AspNetCore.Components.Forms
@using DriveToGetDataWebsitePrototype.Services;
@using DriveToGetDataWebsitePrototype.Models;

@inject ErgastF1Service ergastService

@*
    You do not need two instances of the same service    
    //inject ErgastF1Service RaceRoundService
*@

@rendermode InteractiveServer

<h3>Race Data</h3>

<div>
    <label for="drivers">Drivers:</label>
    <select id="drivers" @bind="@selectedDriver">
        <option value="">Select a driver</option>
        @if (drivers != null)
        {
            @foreach (var driver in drivers)
            {
                <option value="@driver.DriverId">@($"{driver.GivenName} {driver.FamilyName}")</option>
            }
        }
    </select>
</div>

 @* <div>
    <label for="raceRounds">Race Rounds:</label>
    <select id="raceRounds" @bind="@selectedRaceRound">
        <option value="">Select a race round</option>
        @if (raceRounds != null)
        {
            @foreach (var raceRound in raceRounds)
            {
                <option value="@raceRound.Round">@raceRound.RaceName</option>
            }
        }
    </select>
</div>  *@

@{
    selectedRaceRound = "2";
}

@if (!string.IsNullOrEmpty(selectedDriver) && !string.IsNullOrEmpty(selectedRaceRound))
{
    <h4>Race Results: for </h4>
    <p>Loading...</p>
    
    <button class="btn btn-success" @onclick="GetResults">Get Results</button>

    @if (raceResults != null)
    {
        <table>
            <thead>
                <tr>
@*                  <th>Race Name</th>
 *@                 <th>Circuit Name</th>
                    <th>Date</th>
                    <th>Results</th>
@*                  <th>Finishing Position</th>
                    <th>Points</th>
                    <th>Laps completed</th>
                    <th>Finishing Status</th>
                    <th>Fastest Lap Time</th>
                    <th>Fastest Lap Average Speed</th>
 *@                </tr>
            </thead>
            <tbody>
                @foreach (var result in raceResults)
                {
                    <tr>
                        <td>@result.RaceName</td>
                        <td>@result.CircuitName</td>
                        <td>@result.Date</td>
                        <td>@result.Results.Count</td>
@*                         <td>@result.Points</td>
                        <td>@result.Laps</td>
                        <td>@result.Status</td>
                        <td>@result.FastestLap.Time</td>
                        <td>@result.FastestLap.AverageSpeed</td>
 *@                    </tr>
                }
            </tbody>
        </table>
    }
}

@code 
{
    private List<Driver> drivers;
    private List<RaceResult> raceResults;

    private string selectedDriver;
    private string selectedRaceRound;

    //    private List<ErgastResult> results;

    protected override async Task OnInitializedAsync()
    {
        // Why not use your db of drivers for the dropdown?
        drivers = await ergastService.GetErgastDriversAsync();
        
        // do not need the get below
        //raceResults = await ergastService.GetRaceResultsAsync();
    }

    private async Task GetResults()
    {
        raceResults = await ergastService.GetRaceResultsAsync(selectedDriver, 1);
        //httpClient.GetFromJsonAsync<List<Result>>($"https://ergast.com/api/f1/2024/{selectedRaceRound}/drivers/{selectedDriver}/results.json");
    }
}
