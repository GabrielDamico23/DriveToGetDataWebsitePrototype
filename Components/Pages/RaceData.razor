@page "/racedata"

@inject HttpClient httpClient
@using DriveToGetDataWebsitePrototype.Services;
@using DriveToGetDataWebsitePrototype.Models;
@using System.Diagnostics

@inject ErgastF1Service ergastService

@rendermode InteractiveServer

<h3>Race Results</h3>

<div class="m-4">
    <label for="drivers">Drivers:</label>
    <select id="drivers" @onchange="OnDriverChange">
        <option value="">Select a driver</option>
        @if (drivers != null)
        {
            @foreach (var driver in drivers)
            {
                <option value="@driver.driverId">@($"{driver.GivenName} {driver.FamilyName}")</option>
            }
        }
    </select>
</div>

@if (raceResults.Any())
{
    foreach (var race in raceResults)
    {
        <h4 class="mt-4">@race.RaceName</h4>
        <table class="table table-bordered w-50">
            <thead>
                <tr class="bg-info">
                    <th>Driver</th>
                    <th>Starting Grid Position</th>
                    <th>Finishing Position</th>
                    <th>Points</th>
                    <th>Laps completed</th>
                    <th>Finishing Status</th>
                    <th>Fastest Lap Time</th>
                    <th>Fastest Lap Average Speed</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var result in race.ResultsLists.Results)
                {
                    <tr>
                        <td>@result.Driver.GivenName</td>
                        <td>@result.Grid</td>
                        <td class="text-center">@result.Position</td>
                        <td class="text-center">@result.Laps</td>
                        <td>@result.Status</td>
                        <td>@result.FastestLap.Time</td>
                        <td class="text-center">@result.Points</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}
else
{
    <p>No results found for the selected driver.</p>
}


@code
{
    private List<Driver> drivers = new List<Driver>();
    private List<Race1> raceResults = new List<Race1>();
    private string selectedDriver;

    protected override async Task OnInitializedAsync()
    {
        drivers = await ergastService.GetErgastDriversAsync();
    }

    private async Task OnDriverChange(ChangeEventArgs e)
    {
        selectedDriver = e.Value?.ToString();
        await GetResults();
    }

    private async Task GetResults()
    {
        if (!string.IsNullOrEmpty(selectedDriver))
        {
            raceResults = await ergastService.GetRaceResultsAsync(selectedDriver);
        }
    }
}
