@page "/racedata"

@inject HttpClient httpClient
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.AspNetCore.Components.Forms
@using DriveToGetDataWebsitePrototype.Services;
@using DriveToGetDataWebsitePrototype.Models;

@inject ErgastF1Service ergastService

@*
    You do not need two instances of the same service    
    //inject ErgastF1Service RaceRoundService
*@

@rendermode InteractiveServer

<h3>Race Results</h3>

<div class="m-4">
    <label for="drivers">Drivers:</label>
    <select id="drivers" @bind="@selectedDriver">
        <option value="">Select a driver</option>
        @if (drivers != null)
        {
            @foreach (var driver in drivers)
            {
                <option value="@driver.DriverId">@($"{driver.GivenName} {driver.FamilyName}")</option>
            }
        }
    </select>
</div>

 @* <div>
    <label for="raceRounds">Race Rounds:</label>
    <select id="raceRounds" @bind="@selectedRaceRound">
        <option value="">Select a race round</option>
        @if (raceRounds != null)
        {
            @foreach (var raceRound in raceRounds)
            {
                <option value="@raceRound.Round">@raceRound.RaceName</option>
            }
        }
    </select>
</div>  *@

@if (!string.IsNullOrEmpty(selectedDriver))
{
    <button class="btn btn-success m-3" @onclick="GetResults">Get Results</button>

    @if (raceResults != null)
    {
        @foreach (var race in raceResults)
        {
            <h4 class="mt-4">@race.RaceName</h4>
            <table class="table table-bordered w-50">
                <thead>
                    <tr class="bg-info">
                        <th>Driver</th>
                        <th>Constructor</th>
                        <th class="text-center">Laps</th>
                        <th>Millis</th>
                        <th>Time</th>
                       @*  <th>Average Speed</th> *@
                        <th class="text-center">Position</th>
                        <th class="text-center">Points</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(var result in race.Results)
                    {
                        <tr>
                            <td>@result.Driver.GivenName</td>
                            <td>@result.Constructor.Name</td>
                            <td class="text-center">@result.Laps</td>
                            <td>@(result.Time != null ? result.Time.Millis : "")</td>
                            <td>@(result.Time != null ? result.Time.TimeValue : "")</td>
                            <td class="text-center">@result.Position</td>
                            <td class="text-center">@result.Points</td>
                            <td>@result.Status</td>
                            @* <td>@result.FastestLap.Time</td> *@
                        </tr>
                     }
                </tbody>
            </table>
        }
    }
}

@code 
{
    private List<Driver> drivers;
    private List<Race> raceResults;

    private string selectedDriver;

    //    private List<ErgastResult> results;

    protected override async Task OnInitializedAsync()
    {
        // Why not use your db of drivers for the dropdown?
        drivers = await ergastService.GetErgastDriversAsync();
        
        // do not need the get below
        //raceResults = await ergastService.GetRaceResultsAsync();
    }

    private async Task GetResults()
    {
        raceResults = await ergastService.GetRaceResultsAsync(selectedDriver);
        //httpClient.GetFromJsonAsync<List<Result>>($"https://ergast.com/api/f1/2024/{selectedRaceRound}/drivers/{selectedDriver}/results.json");
    }
}
